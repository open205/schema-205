#include "{{ subclass_file }}_factory.h"
#include "{{ subclass_file }}.h"
#include <memory>
#include <courierr/courierr.h>

/// @note  This class has been generated from a template. Local changes will not be saved!

using namespace {{container}};

std::shared_ptr<{{ base_class_root_name }}Base> {{ factory_subclass }}::create_instance(const char* RS_instance_file, std::shared_ptr<Courierr::Courierr> logger) const
{
    auto p_rs = std::make_shared<{{ subclass_file }}_ns::{{ subclass }}>();
    auto j = tk205::load_json(RS_instance_file);
    std::string schema_version = j["metadata"]["schema_version"];
    if (SchemVer(schema_version.c_str()) > SchemVer(std::string({{ subclass_file }}_ns::Schema::schema_version).c_str()))
    {
        p_rs = nullptr;
        std::ostringstream oss;
        oss << "Schema version " << schema_version << " is not supported.";
        logger->error(oss.str());
    }
    else if (j["metadata"]["schema"] == "{{ subclass }}")
    {
        if ({{ support_structures_file }}_ns::{{ support_structure_class }}::logger == nullptr) {
            {{ support_structures_file }}_ns::{{ support_structure_class }}::logger = logger;
        }
        {{ subclass_file }}_ns::{{ subclass }}::logger = logger;
        p_rs->initialize(j);
    }
    else
    {
        p_rs = nullptr;
        std::ostringstream oss;
        oss << RS_instance_file << " is not a valid instance of {{ subclass }}; returning nullptr.";
        logger->error(oss.str());
    }
    return p_rs;
}
